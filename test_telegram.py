from config import *
import threading
import telebot

from telebot.types import InlineKeyboardMarkup
from telebot.types import InlineKeyboardButton

### DEFINES ################################
DIAS_SEMANA = ['Lunes', 'Martes', 'Mi√©rcoles', 'Jueves', 'Viernes', 'S√°bado', 'Domingo']
EMOJIS_NUMEROS = ['1Ô∏è‚É£','2Ô∏è‚É£','3Ô∏è‚É£','4Ô∏è‚É£','5Ô∏è‚É£','6Ô∏è‚É£','7Ô∏è‚É£','8Ô∏è‚É£','9Ô∏è‚É£','üîü','1Ô∏è‚É£1Ô∏è‚É£','1Ô∏è‚É£2Ô∏è‚É£','1Ô∏è‚É£3Ô∏è‚É£','1Ô∏è‚É£4Ô∏è‚É£','1Ô∏è‚É£5Ô∏è‚É£','1Ô∏è‚É£6Ô∏è‚É£','1Ô∏è‚É£7Ô∏è‚É£','1Ô∏è‚É£8Ô∏è‚É£','1Ô∏è‚É£9Ô∏è‚É£','2Ô∏è‚É£0Ô∏è‚É£']

### VARIABLES ##############################
bot = telebot.TeleBot(BOT_TOKEN)
lista_semanal = {}
lista_negra = []
lista_dolorosa = {} # Para el futuro
max_miembros_diarios = 7

### INTERFAZ ###############################
def A√±adirDia(dia):
    lista_semanal[dia] = []

def QuitarDia(dia):
    del lista_semanal[dia]

def PlazasLibres(dia):
    if dia in lista_semanal:
        return max_miembros_diarios - len(lista_semanal[dia])
    return 0

def A√±adirReserva(dia, username, chatId, messageId):
    if PlazasLibres(dia) == 0:
        # A√±adir notificacion de error
        return False
    lista_semanal[dia].append(username)
    bot.edit_message_text(chatId, messageId, ImprimirLista())
    return True

def QuitarReserva(dia, username, chatId, messageId):

    if username in lista_semanal[dia] is None:
        # A√±adir notificacion de error
        return False
    lista_semanal[dia].reverse()
    lista_semanal[dia].remove(username)
    lista_semanal[dia].reverse()
    bot.edit_message_text(chatId, messageId, ImprimirLista())
    return True

def ImprimirLista():
    message = '[Texto de ejemplo lol]\n'
    for dia, lista in lista_semanal.items():
        emoji_estado = 'üü¢'
        estado_plaza = 'DISPONIBLE'
        if PlazasLibres(dia) == 0:
            emoji_estado = 'üî¥'
            estado_plaza = 'COMPLETO'
        elif PlazasLibres(dia) == 1:
            emoji_estado = 'üü°'
            estado_plaza = '√öLTIMA PLAZA'

        dia_mayus = dia.capitalize()
        message += '[' + emoji_estado + '] ' + dia_mayus + ' ' + estado_plaza + '\n\n'
        for i in range(max_miembros_diarios):
            message += EMOJIS_NUMEROS[i] + ' '
            if i < len(lista):
                message += lista[i]
            message += '\n'
        message += '\n'

    return message

def CheckEsMiembro(username):
    return username in LISTA_SOCIOS is None

def CheckEsSocio(username):
    return username in LISTA_SOCIOS is not None

def CheckEsAdmin(username):
    return username in LISTA_ADMINS is not None

def ArrobaUser(username):
    return '@' + username

### TELEGRAM ###############################
@bot.message_handler(commands=['lista'])
def on_command(message):
    markup = InlineKeyboardMarkup()
    addButton = InlineKeyboardButton('A√±adir reserva', callback_data='a√±adir reserva')
    removeButton = InlineKeyboardButton('Quitar reserva', callback_data='quitar reserva')
    markup.add(addButton, removeButton)
    bot.reply_to(message, ImprimirLista(), reply_markup=markup)

@bot.callback_query_handler(func = lambda x: True)
def respuesta_botones_reserva(call):
    username = call.from_user.username
    messageId = call.message.id
    chatId = call.message.chat.id
    
    if call.data == 'a√±adir reserva':
        A√±adirReserva(DIAS_SEMANA[5], username, chatId, messageId)
    if call.data == 'quitar reserva':
        QuitarReserva(DIAS_SEMANA[5], username, chatId, messageId)

def recibir_mensajes():
    bot.infinity_polling()

### MAIN ###################################
if __name__ == '__main__':
    print('Iniciando el bot...')
    #hilo_bot = threading.Thread(name='Hilo_bot', target=recibir_mensajes)
    A√±adirDia(DIAS_SEMANA[5])
    A√±adirDia(DIAS_SEMANA[6])
    recibir_mensajes() 
    print('Fin de la ejecuci√≥n')